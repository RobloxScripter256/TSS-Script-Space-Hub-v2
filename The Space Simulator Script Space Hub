local allowedPlaceIds = {
	15027718878, -- Replace with the allowed PlaceId(s)
}

if not table.find(allowedPlaceIds, game.PlaceId) then
	warn("This script is not allowed in this place.")
	return -- stops the script from continuing
end

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
	Name = "The Space Simulator - Space Hub ü™ê",
	Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
	LoadingTitle = "Space Hub",
	LoadingSubtitle = "by Dev_Smiley",
	ShowText = "Space Hub ü™ê", -- for mobile users to unhide rayfield, change if you'd like
	Theme = "Bloom", -- Check https://docs.sirius.menu/rayfield/configuration/themes

	ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

	DisableRayfieldPrompts = false,
	DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "Big Hub"
	},

	Discord = {
		Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},

	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Untitled",
		Subtitle = "Key System",
		Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
		FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
})

local ShipTab = Window:CreateTab("Ship", 4483362458) -- Title, Image
local PlayerTab = Window:CreateTab("LocalPlayer", 4483362458) -- Title, Image
local ESPTab = Window:CreateTab("ESP", 4483362458) -- Title, Image
local CSettingsTab = Window:CreateTab("Client Settings", 4483362458) -- Title, Image
local OtherTab = Window:CreateTab("Other", 4483362458) -- Title, Image

local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")

--Local Player Functions

local Slider = PlayerTab:CreateSlider({
	Name = "Walkspeed",
	Range = {10, 100},
	Increment = 1,
	Suffix = "Speed",
	CurrentValue = 10,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = Value
	end,
})
local Slider = PlayerTab:CreateSlider({
	Name = "JetPack Speed",
	Range = {5, 100},
	Increment = 1,
	Suffix = "Max Jetpack Speed",
	CurrentValue = 5,
	Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		game.Players.LocalPlayer:SetAttribute("jetpackSpeed", Value)
	end,
})

local Slider = PlayerTab:CreateSlider({
	Name = "Jump Power",
	Range = {50, 400},
	Increment = 1,
	Suffix = "Current Jump Power",
	CurrentValue = 50,
	Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").JumpPower = Value
	end,
})

local Slider = PlayerTab:CreateSlider({
	Name = "Hip Height",
	Range = {0, 100},
	Increment = 1,
	Suffix = "Current Hip Height",
	CurrentValue = 0,
	Flag = "Slider4", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").HipHeight = Value
	end,
})

--Toggle Buttons For Boolens
local Button = PlayerTab:CreateButton({
	Name = "Sit Player",
	Callback = function()
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Sit = true-- The function that takes place when the button is pressed
	end,
})

local Button = PlayerTab:CreateButton({
	Name = "Reset",
	Callback = function()
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Health = 0-- The function that takes place when the button is pressed
	end,
})

local Button = PlayerTab:CreateButton({
	Name = "Rejoin",
	Callback = function()
		local player = game.Players.LocalPlayer
		local placeId = game.PlaceId
		TeleportService:Teleport(placeId, player)
	end,
})

local autorotateButton
local AutoRotate = false

autorotateButton = PlayerTab:CreateButton({
	Name = "Auto Rotate: True",
	Callback = function()
		local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
		if not humanoid then
			warn("Humanoid Not Found")
			return
		end

		AutoRotate = not AutoRotate
		if AutoRotate then
			autorotateButton:Set("Auto Rotate: True")
			humanoid.AutoRotate = true
		else
			autorotateButton:Set("Auto Rotate: False")
			humanoid.AutoRotate = false
		end
	end,
})

--Ship Functions

local Label = ShipTab:CreateLabel("For Change Speed You Must Sitting In Ship", 4483362458, Color3.fromRGB(255, 205, 220), false) -- Title, Icon, Color, IgnoreTheme

local Slider = ShipTab:CreateSlider({
	Name = "Ship Speed",
	Range = {0, 150},
	Increment = 1,
	Suffix = "Max Speed",
	CurrentValue = 0,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").SeatPart.Parent:FindFirstChild("Main"):SetAttribute("maxSpeed", Value)-- The function that takes place when the slider changes
	end,
})

local Slider = ShipTab:CreateSlider({
	Name = "Ship Acceleration",
	Range = {0, 150},
	Increment = 1,
	Suffix = "Max Acceleration",
	CurrentValue = 0,
	Flag = "Slider2",
	Callback = function(Value)
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").SeatPart.Parent:FindFirstChild("Main"):SetAttribute("acceleration", Value)
	end,
})

local Slider = ShipTab:CreateSlider({
	Name = "Ship Deceleration",
	Range = {0, 150},
	Increment = 1,
	Suffix = "Max Deceleration",
	CurrentValue = 0,
	Flag = "Slider3",
	Callback = function(Value)
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").SeatPart.Parent:FindFirstChild("Main"):SetAttribute("deceleration", Value)
	end,
})


local Slider = ShipTab:CreateSlider({
	Name = "Ship Agility",
	Range = {0, 150},
	Increment = 1,
	Suffix = "Max Agility",
	CurrentValue = 0,
	Flag = "Slider4",
	Callback = function(Value)
		game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").SeatPart.Parent:FindFirstChild("Main"):SetAttribute("agility", Value)
	end,		
})

local Label = ShipTab:CreateLabel("Kuiper Belt Speed Loop (Value 0 To Stop Loop)", 4483362458, Color3.fromRGB(255, 205, 220), false) -- Title, Icon, Color, IgnoreTheme

local speedLoopConnection
local currentSpeedValue = 0 -- Keep track of latest slider value

local Slider = ShipTab:CreateSlider({
	Name = "Ship Speed",
	Range = {0, 100},
	Increment = 1,
	Suffix = "Loop Speed",
	CurrentValue = 0,
	Flag = "Slider5",
	Callback = function(Value)
		currentSpeedValue = Value

		local seat = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid").SeatPart
		local main = seat and seat.Parent and seat.Parent:FindFirstChild("Main")
		if not main then return end

		local linearVelocity = main:FindFirstChildOfClass("LinearVelocity")
		if not linearVelocity then return end

		if Value <= 0 then
			if speedLoopConnection then
				speedLoopConnection:Disconnect()
				speedLoopConnection = nil
			end
			linearVelocity.VectorVelocity = Vector3.zero
			return
		end

		-- Start loop if not already started
		if not speedLoopConnection then
			speedLoopConnection = game:GetService("RunService").Heartbeat:Connect(function()
				linearVelocity.VectorVelocity = Vector3.new(currentSpeedValue, 0, 0)
			end)
		end
	end
})

--Client Settings Functions

local Button = CSettingsTab:CreateButton({
	Name = "Unlock Instant Speed Gamepass",
	Callback = function()
		game.Players.LocalPlayer:SetAttribute("InstantSpeedGP", true)-- The function that takes place when the button is pressed
	end,
})

local Button = CSettingsTab:CreateButton({
	Name = "Unlock Instant Brake Gamepass",
	Callback = function()
		game.Players.LocalPlayer:SetAttribute("InstantBrakeGP", true)-- The function that takes place when the button is pressed
	end,
})

local Button = CSettingsTab:CreateButton({
	Name = "Unlock Music Player Gamepass",
	Callback = function()
		game.Players.LocalPlayer:SetAttribute("MusicPlayerGP", true)-- The function that takes place when the button is pressed
	end,
})

local Button = CSettingsTab:CreateButton({
	Name = "Unlock Ship Lock Gamepass (Client Side)",
	Callback = function()
		game.Players.LocalPlayer:SetAttribute("ShipLockGP", true)-- The function that takes place when the button is pressed
	end,
})

local Button = CSettingsTab:CreateButton({
	Name = "Enable InGroup (Client Side)",
	Callback = function()
		game.Players.LocalPlayer:SetAttribute("inGroup", true)-- The function that takes place when the button is pressed
	end,
})

local Button = CSettingsTab:CreateButton({
	Name = "Unlock Vortex Gamepass (Client Side)",
	Callback = function()
		game.Players.LocalPlayer:SetAttribute("VortexGP", true)-- The function that takes place when the button is pressed
	end,
})

local Button = CSettingsTab:CreateButton({
	Name = "Unlock Quantum Drill Gamepass (Client Side)",
	Callback = function()
		game.Players.LocalPlayer:SetAttribute("QuantumDrillGP", true)-- The function that takes place when the button is pressed
	end,
})

local Button = CSettingsTab:CreateButton({
	Name = "Unlock Double Xp Gamepass (Client Side)",
	Callback = function()
		game.Players.LocalPlayer:SetAttribute("DoubleXpGP", true)-- The function that takes place when the button is pressed
	end,
})

--Other Functions

local function firePrompt(prompt)
	if typeof(prompt) == "Instance" and prompt:IsA("ProximityPrompt") then
		-- fireproximityprompt is a global function in Roblox
		fireproximityprompt(prompt)
	else
		warn("Provided object is not a ProximityPrompt!")
	end
end

local Button = OtherTab:CreateButton({
	Name = "Open Hubble Telescope",
	Callback = function()
		local prompt = workspace:WaitForChild("Planetoids"):WaitForChild("Hubble"):WaitForChild("ControlPanel"):FindFirstChildOfClass("ProximityPrompt")
		if prompt then
			firePrompt(prompt)
		end
	end,
})

local AntiCheatHideFrameButton

local dialogGui = game.Players.LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("DialogGui")
local cleanerOn = false
local cleanerConnection = nil

toggleButton = OtherTab:CreateButton({
	Name = "Anti-Cheat Warning Frame: Show",
	Callback = function()
		cleanerOn = not cleanerOn

		if cleanerOn then
			toggleButton:Set("Anti-Cheat Warning Frame: Hide") -- show "Hide" when enabled

			-- Start cleaning loop
			cleanerConnection = RunService.RenderStepped:Connect(function()
				if not dialogGui then return end

				local dialogsFrame = dialogGui:FindFirstChild("DialogsFrames")
				if dialogsFrame then
					for _, child in ipairs(dialogsFrame:GetChildren()) do
						if child:IsA("Frame") then
							child:Destroy()
						end
					end
				end
			end)

		else
			toggleButton:Set("Anti-Cheat Warning Frame: Show") -- show "Show" when disabled

			-- Stop cleaning loop
			if cleanerConnection then
				cleanerConnection:Disconnect()
				cleanerConnection = nil
			end
		end
	end
})

local Button = OtherTab:CreateButton({
	Name = "Clean Rocks (Dont Click If You Removed Asteroids)",
	Callback = function()
		local rocks = workspace:WaitForChild("Rocks")
		for _, child in ipairs(rocks:GetChildren()) do
			child:Destroy()
		end
	end,
})

local Button = OtherTab:CreateButton({
	Name = "Remove Asteroids",
	Callback = function()
		local rocks = workspace:WaitForChild("Rocks")
		rocks:Destroy()
	end
})

local Button

Button = OtherTab:CreateButton({
	Name = "Destroy Client (Stop The Main Functions)",
	Callback = function()
		local skin = workspace:WaitForChild("Planets"):WaitForChild("Eris"):WaitForChild("Skin")
		if skin then
			skin:Destroy()
		end

		-- Change button text after action
		Button:Set("Game Client Destroyed. Please Rejoin")
	end,
})

--ESP Functions

--Alien Ship ESP Functions

local espAOn = false
local billboardName = "AlienESP_Billboard"

local alienShip = workspace:WaitForChild("SpecialRockets"):WaitForChild("Alien")

local function addABillboard()
	if alienShip:FindFirstChild(billboardName) then return end

	local abillboard = Instance.new("BillboardGui")
	abillboard.Name = billboardName
	abillboard.Adornee = alienShip
	abillboard.Size = UDim2.new(0, 100, 0, 25)
	abillboard.StudsOffset = Vector3.new(0, 2, 0)
	abillboard.AlwaysOnTop = true
	abillboard.Parent = alienShip

	local atextLabel = Instance.new("TextLabel")
	atextLabel.Size = UDim2.new(1, 0, 1, 0)
	atextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
	atextLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
	atextLabel.BackgroundTransparency = 1
	atextLabel.Text = "Alien Ship üõ∏"
	atextLabel.TextColor3 = Color3.new(0, 0.666667, 0.498039)
	atextLabel.Font = Enum.Font.FredokaOne
	atextLabel.TextScaled = true
	atextLabel.Parent = abillboard
end

local function removeABillboard()
	local billboard = alienShip:FindFirstChild(billboardName)
	if billboard then
		billboard:Destroy()
	end
end

--Centaurs ESP Functions

local espOn = false
local billboardName = "CentaurESP_Billboard"

local function getCentaurFolder()
	return workspace:FindFirstChild("Centaurs")
end

local function addBillboards()
	local centaurFolder = getCentaurFolder()
	if not centaurFolder then
		warn("Centaurs folder not found in workspace.")
		return
	end

	for _, model in pairs(centaurFolder:GetChildren()) do
		if model:IsA("Model") and not model:FindFirstChild(billboardName) then
			local primaryPart = model.PrimaryPart or model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
			if primaryPart then
				local billboard = Instance.new("BillboardGui")
				billboard.Name = billboardName
				billboard.Adornee = primaryPart
				billboard.Size = UDim2.new(0, 100, 0, 25)
				billboard.StudsOffset = Vector3.new(0, 3, 0)
				billboard.AlwaysOnTop = true
				billboard.Parent = model

				local textLabel = Instance.new("TextLabel")
				textLabel.Size = UDim2.new(1, 0, 1, 0)
				textLabel.AnchorPoint = Vector2.new(0.5, 0.5) -- Center alignment
				textLabel.Position = UDim2.new(0.5, 0, 0.5, 0) -- Center position
				textLabel.BackgroundTransparency = 1
				textLabel.Text = model.Name
				textLabel.TextColor3 = Color3.new(1, 1, 1) -- Yellow
				textLabel.Font = Enum.Font.Jura
				textLabel.TextScaled = true
				textLabel.Parent = billboard
			end
		end
	end
end

local function removeBillboards()
	local centaurFolder = getCentaurFolder()
	if not centaurFolder then return end

	for _, model in pairs(centaurFolder:GetChildren()) do
		local billboard = model:FindFirstChild(billboardName)
		if billboard then
			billboard:Destroy()
		end
	end
end

--Voyager ESP Functions

local espOn = false
local billboardName = "VoyagerESP_Billboard"

local goldenRecord = workspace:WaitForChild("Planetoids")
	:WaitForChild("Voyager")
	:WaitForChild("Minerals")
	:WaitForChild("Golden Record")

local function addBillboard()
	if goldenRecord:FindFirstChild(billboardName) then return end

	local billboard = Instance.new("BillboardGui")
	billboard.Name = billboardName
	billboard.Adornee = goldenRecord
	billboard.Size = UDim2.new(0, 100, 0, 25)
	billboard.StudsOffset = Vector3.new(0, 2, 0)
	billboard.AlwaysOnTop = true
	billboard.Parent = goldenRecord

	local textLabel = Instance.new("TextLabel")
	textLabel.Size = UDim2.new(1, 0, 1, 0)
	textLabel.AnchorPoint = Vector2.new(0.5, 0.5)
	textLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
	textLabel.BackgroundTransparency = 1
	textLabel.Text = "Voyager üõ∞"
	textLabel.TextColor3 = Color3.new(0, 0.666667, 1)
	textLabel.Font = Enum.Font.FredokaOne
	textLabel.TextScaled = true
	textLabel.Parent = billboard
end

local function removeBillboard()
	local billboard = goldenRecord:FindFirstChild(billboardName)
	if billboard then
		billboard:Destroy()
	end
end

local toggleButton -- forward declare for use inside the callback
local espvgbutton
local AlienESPButton

toggleButton = ESPTab:CreateButton({
	Name = "Centaurs ESP: Off",
	Callback = function()
		local centaurFolder = getCentaurFolder()
		if not centaurFolder then
			warn("Centaurs folder not found, can't toggle ESP.")
			return
		end

		espOn = not espOn
		if espOn then
			toggleButton:Set("Centaurs ESP: On")
			addBillboards()
		else
			toggleButton:Set("Centaurs ESP: Off")
			removeBillboards()
		end
	end,
})

espvgbutton = ESPTab:CreateButton({
	Name = "Voyager ESP: Off",
	Callback = function()
		espOn = not espOn
		if espOn then
			espvgbutton:Set("Voyager ESP: On")
			addBillboard()
		else
			espvgbutton:Set("Voyager ESP: Off")
			removeBillboard()
		end
	end
})

AlienESPButton = ESPTab:CreateButton({
	Name = "Alien UFO ESP: Off",
	Callback = function()
		espAOn = not espAOn
		if espAOn then
			AlienESPButton:Set("Alien UFO ESP: On")
			addABillboard()
		else
			AlienESPButton:Set("Alien UFO ESP: Off")
			removeABillboard()
		end
	end
})

local toggleConnection
local espTags = {} -- Track ESPs so we can remove them later

local Toggle = ESPTab:CreateToggle({
	Name = "Artifact ESP",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		-- Cleanup old ESPs if turning off
		if not Value then
			for _, tag in ipairs(espTags) do
				if tag and tag.Parent then
					tag:Destroy()
				end
			end
			espTags = {}
			return
		end

		-- On toggle ON
		local planets = workspace:FindFirstChild("Planets")
		if not planets then return end

		for _, model in ipairs(planets:GetChildren()) do
			local artifacts = model:FindFirstChild("Artifacts")
			if artifacts then
				for _, part in ipairs(artifacts:GetDescendants()) do
					if part:IsA("BasePart") then
						local billboard = Instance.new("BillboardGui")
						billboard.Name = "ArtifactESP"
						billboard.Size = UDim2.new(0, 100, 0, 30)
						billboard.StudsOffset = Vector3.new(0, 2, 0)
						billboard.AlwaysOnTop = true
						billboard.Adornee = part
						billboard.Parent = part

						local label = Instance.new("TextLabel")
						label.AnchorPoint = Vector2.new(0.5, 0.5)
						label.Position = UDim2.new(0.5, 0, 0.5, 0)
						label.Size = UDim2.new(1, 0, 1, 0)
						label.BackgroundTransparency = 1
						label.Text = part.Name
						label.TextColor3 = Color3.new(1, 1, 0)
						label.TextStrokeTransparency = 0.5
						label.TextScaled = true
						label.Font = Enum.Font.SourceSansBold
						label.Parent = billboard

						table.insert(espTags, billboard)
					end
				end
			end
		end
	end,
})

-------------------------------------------------------------------------------------------------------------------------------------------------------------

--Other Teleports

local OtherTpTab = Window:CreateTab("Other Teleport", 4483362458) -- Title, Image

local Label = OtherTpTab:CreateLabel("Artifacts", 4483362458, Color3.fromRGB(255, 205, 220), false) -- Title, Icon, Color, IgnoreTheme

--Artifacts Teleport

-- Outside the button
local artifactMemory = {}
local allArtifacts = {}

local function refreshArtifacts()
	allArtifacts = {}
	local planets = workspace:FindFirstChild("Planets")
	if planets then
		for _, model in ipairs(planets:GetChildren()) do
			local artifacts = model:FindFirstChild("Artifacts")
			if artifacts then
				for _, part in ipairs(artifacts:GetDescendants()) do
					if part:IsA("BasePart") then
						table.insert(allArtifacts, part)
					end
				end
			end
		end
	end
end

local Button = OtherTpTab:CreateButton({
	Name = "Artifact Teleport",
	Callback = function()
		local player = game.Players.LocalPlayer
		local char = player.Character
		local hrp = char and char:FindFirstChild("HumanoidRootPart")
		if not hrp then return end

		if #allArtifacts == 0 then
			refreshArtifacts()
		end

		-- Filter unvisited and within 150 studs
		local available = {}
		for _, artifact in ipairs(allArtifacts) do
			if not table.find(artifactMemory, artifact) then
				local distance = (hrp.Position - artifact.Position).Magnitude
				if distance <= 150 then
					table.insert(available, artifact)
				end
			end
		end

		if #available == 0 then
			artifactMemory = {} -- Reset memory
			refreshArtifacts()  -- Optionally refresh artifacts again
			return
		end

		local chosen = available[math.random(1, #available)]
		table.insert(artifactMemory, chosen)

		-- Teleport player right next to the artifact
		local targetPos = chosen.Position + Vector3.new(0, 3, 0) -- Slightly above
		hrp.CFrame = CFrame.new(targetPos)
	end,
})

local Label = OtherTpTab:CreateLabel("Caves ( You Must Inside That Planet To Teleport )", 4483362458, Color3.fromRGB(255, 205, 220), false) -- Title, Icon, Color, IgnoreTheme

local isInsideMakeMake = false  -- Track toggle state
local Button2  -- declare it first

Button2 = OtherTpTab:CreateButton({
	Name = "Teleport Inside MakeMake Cave",
	Callback = function()
		local player = game.Players.LocalPlayer
		local char = player.Character
		local hrp = char and char:FindFirstChild("HumanoidRootPart")
		if not hrp then return end

		local center = workspace:WaitForChild("Planets"):WaitForChild("Makemake"):WaitForChild("Center")
		if not center or not center:IsA("BasePart") then return end

		if not isInsideMakeMake then
			-- Teleport under Center
			hrp.CFrame = center.CFrame * CFrame.new(0, -10, 0)
			isInsideMakeMake = true
			Button2:Set("Teleport Outside MakeMake Cave")
		else
			-- Teleport above Center
			hrp.CFrame = center.CFrame * CFrame.new(0, 35, 0)
			isInsideMakeMake = false
			Button2:Set("Teleport Inside MakeMake Cave")
		end
	end,
})

local isInsideSedna = false  -- Toggle state
local Button3  -- Declare first

Button3 = OtherTpTab:CreateButton({
	Name = "Teleport Inside Sedna Cave",
	Callback = function()
		local player = game.Players.LocalPlayer
		local char = player.Character
		local hrp = char and char:FindFirstChild("HumanoidRootPart")
		if not hrp then return end

		local center = workspace:WaitForChild("Planets"):WaitForChild("Sedna"):WaitForChild("Center")
		if not center or not center:IsA("BasePart") then return end

		if not isInsideSedna then
			-- Teleport under cave
			hrp.CFrame = center.CFrame * CFrame.new(0, -10, 0)
			isInsideSedna = true
			Button3:Set("Teleport Outside Sedna Cave")
		else
			-- Teleport above cave
			hrp.CFrame = center.CFrame * CFrame.new(0, 35, 0)
			isInsideSedna = false
			Button3:Set("Teleport Inside Sedna Cave")
		end
	end,
})

-------------------------------------------------------------------------------------------------------------------------------------------------------------
local PlanetTpTab = Window:CreateTab("Planets Teleport", 4483362458)

local Label = PlanetTpTab:CreateLabel("Beta Teleport Some Will Not Work", 4483362458, Color3.fromRGB(255, 205, 220), false) -- Title, Icon, Color, IgnoreTheme

--Earth Functions And Button Toggle

local teleporting = false
local teleportCoroutine

local function startTeleportLoop()
	if teleporting then return end
	teleporting = true

	teleportCoroutine = coroutine.create(function()
		local Players = game:GetService("Players")
		local player = Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoid = character:WaitForChild("Humanoid")
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

		local skinPart = workspace:FindFirstChild("Planets") 
			and workspace.Planets:FindFirstChild("Earth") 
			and workspace.Planets.Earth:FindFirstChild("Skin")

		if not skinPart then
			warn("Skin part not found!")
			teleporting = false
			return
		end

		local function findNearbySeat()
			local radius = 300
			for _, part in pairs(workspace:GetDescendants()) do
				if (part:IsA("Seat") or part:IsA("VehicleSeat")) and part:IsA("BasePart") then
					if (part.Position - skinPart.Position).Magnitude <= radius then
						return part
					end
				end
			end
			return nil
		end

		local targetSeat = findNearbySeat()

		if not targetSeat then
			warn("No seat found within 300 studs of Skin!")
			teleporting = false
			return
		end

		print("Found seat:", targetSeat:GetFullName())

		-- First teleport player ONCE to seat position (above seat)
		humanoidRootPart.CFrame = targetSeat.CFrame + Vector3.new(0, 2, 0)

		-- Wait until player sits
		print("Waiting for player to sit...")
		repeat
			task.wait(0.2)
		until humanoid.Sit or not teleporting

		if not teleporting then
			print("Teleport stopped before sitting.")
			return
		end

		print("Player sat down! Starting teleport loop.")

		-- Now loop teleport while toggle is still ON
		while teleporting do
			if character and character.Parent then
				humanoidRootPart.CFrame = targetSeat.CFrame + Vector3.new(0, 2, 0)
			end
			task.wait(0.5)
		end

		print("Teleport loop ended, player stays where they are.")
	end)

	coroutine.resume(teleportCoroutine)
end

local function stopTeleportLoop()
	if teleporting then
		teleporting = false
		print("Teleport loop stopped manually.")
	end
end

-- Your toggle callback example:
local Toggle = PlanetTpTab:CreateToggle({
	Name = "Earth Teleport",
	CurrentValue = false,
	Flag = "Toggle1",
	Callback = function(Value)
		if Value then
			startTeleportLoop()
		else
			stopTeleportLoop()
		end
	end
})

-------------------------------------------------------------------------------------------------------------------------------------------------------------

local TrollTab = Window:CreateTab("Troll", 4483362458) -- Title, Image

local Label = TrollTab:CreateLabel("We are working on this D:", 4483362458, Color3.fromRGB(255, 205, 220), false) -- Title, Icon, Color, IgnoreTheme

